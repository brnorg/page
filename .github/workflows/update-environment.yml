name: Update Environment

on:
  workflow_dispatch:
    inputs:
      pat:
        description: 'Personal Access Token'
        required: true
      repository:
        description: 'Repository name (owner/repo)'
        required: true
      structure:
        description: 'Environment structure'
        required: true

jobs:
  update-environment:
    runs-on: ubuntu-latest
    steps:
      - name: Validate PAT and Repository Access
        run: |
          # Validar o PAT tentando obter informações do usuário
          USER_RESPONSE=$(curl -s -H "Authorization: Bearer ${{ github.event.inputs.pat }}" \
            https://api.github.com/user)
          
          if echo "$USER_RESPONSE" | grep -q "Bad credentials"; then
            echo "Error: Invalid PAT provided"
            exit 1
          fi
          
          # Validar acesso ao repositório
          REPO_RESPONSE=$(curl -s -H "Authorization: Bearer ${{ github.event.inputs.pat }}" \
            https://api.github.com/repos/${{ github.event.inputs.repository }})
          
          if echo "$REPO_RESPONSE" | grep -q "Not Found"; then
            echo "Error: Repository not found or no access"
            exit 1
          fi
          
          echo "PAT and repository access validated successfully"

      - name: Process Environment Structure
        run: |
          echo '${{ github.event.inputs.structure }}' > environment.json
          
          # Funções auxiliares
          create_or_update_environment() {
            local env_name=$1
            local repo=$2
            local token=$3
            
            # Verificar se o ambiente existe
            ENV_RESPONSE=$(curl -s -H "Authorization: Bearer $token" \
              "https://api.github.com/repos/$repo/environments/$env_name")
            
            if echo "$ENV_RESPONSE" | grep -q "Not Found"; then
              # Criar ambiente se não existir
              curl -X PUT \
                -H "Authorization: Bearer $token" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/repos/$repo/environments/$env_name" \
                -d '{}'
              
              echo "Environment $env_name created"
            else
              echo "Environment $env_name already exists"
            fi
          }
          
          create_or_update_secret() {
            local env_name=$1
            local secret_name=$2
            local secret_value=$3
            local repo=$4
            local token=$5
            
            # Create temporary Node.js script for secret encryption
            cat > encrypt_secret.js << 'EOFJS'
            const sodium = require('libsodium-wrappers');

            async function encryptSecret(publicKey, secret) {
              await sodium.ready;
              const binkey = sodium.from_base64(publicKey, sodium.base64_variants.ORIGINAL)
              const binsec = sodium.from_string(secret)
              const encBytes = sodium.crypto_box_seal(binsec, binkey)
              return sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)
            }

            const publicKey = process.argv[2];
            const secret = process.argv[3];

            encryptSecret(publicKey, secret)
              .then(encrypted => console.log(encrypted))
              .catch(err => {
                console.error(err);
                process.exit(1);
              });
            EOFJS
            
            # Install libsodium-wrappers
            npm install libsodium-wrappers
            
            # Get repository public key
            PUBLIC_KEY_RESPONSE=$(curl -s -H "Authorization: Bearer $token" \
              "https://api.github.com/repos/$repo/actions/secrets/public-key")
            
            KEY_ID=$(echo "$PUBLIC_KEY_RESPONSE" | jq -r .key_id)
            PUBLIC_KEY=$(echo "$PUBLIC_KEY_RESPONSE" | jq -r .key)
            
            # Encrypt secret using Node.js script
            ENCRYPTED_SECRET=$(node encrypt_secret.js "$PUBLIC_KEY" "$secret_value")
            
            # Clean up temporary files
            rm encrypt_secret.js
            rm package.json
            rm package-lock.json
            rm -rf node_modules
            
            # Send encrypted secret
            curl -X PUT \
              -H "Authorization: Bearer $token" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/$repo/environments/$env_name/secrets/$secret_name" \
              -d "{\"encrypted_value\":\"$ENCRYPTED_SECRET\",\"key_id\":\"$KEY_ID\"}"
            
            echo "Secret $secret_name processed for environment $env_name"
          }
          
          create_or_update_variable() {
            local env_name=$1
            local var_name=$2
            local var_value=$3
